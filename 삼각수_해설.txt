힌트 1
재귀 함수에는 recursive case와 base case가 있습니다.

Recursive case: 현 문제가 너무 커서, 같은 형태의 더 작은 부분 문제를 재귀적으로 푸는 경우
Base case: 이미 문제가 충분히 작아서, 더 작은 부분 문제로 나누지 않고도 바로 답을 알 수 있는 경우
우선 base case가 무엇인지 생각해 볼까요?

힌트 2
인풋이 n이면, 함수 triangle_number는 n부터 1까지의 숫자를 더해야 합니다(1부터 n까지 더하는 것과 동일하죠).

인풋 n의 값이 무엇일 때 base case일까요?

힌트 3
현재 문제가 너무 커서 바로 풀지 못하는 경우가 recursive case입니다. triangular_number(50)의 리턴값이 무엇인지 머릿속으로 바로 생각해내지 못하죠? 그런 경우에는 recursive case가 필요한 거죠.

반대로 현재 문제가 충분히 작아서 바로 풀 수 있는 경우가 base case입니다.

인풋 n이 어떤 값일 때 문제가 충분히 작아서 답을 바로 생각해낼 수 있나요?

힌트 4
인풋 n이 1인 경우에 답을 바로 생각해낼 수 있습니다.

n이 1이라는 것은 자연수 1부터 1까지 더하라는 의미인데요. 고민할 것도 없이 답은 1입니다. 그러니까 n이 1이면 부분 문제를 더 이상 만들지 않고 바로 1을 리턴하면 되겠죠?

이 부분을 코드로 쓰면 어떻게 될까요?

힌트 5
함수에 들어오는 인풋이 1일 때, 즉 n이 1일 때, 숫자 1을 리턴하면 되겠죠?

def triangle_number(n):
    # base case
    if n == 1:
        return 1
힌트 6
Base case를 알아냈으니, 이제 recursive case는 무엇일지 한 번 생각해 볼까요?

n이 1인 경우에는 바로 답을 알고 리턴했지만, n이 1보다 큰 경우에는 바로 답을 구하지 못하기 때문에 부분 문제를 풀어야 합니다.

예를 들어 n이 5인 경우를 생각해 보죠. 일단 문제는 5+4+3+2+1을 해결하는 것입니다. 우리가 풀어야 할 부분 문제는 무엇일까요?

우리에게 현재 주어진 정보는 n이 5라는 것입니다. 5와 4+3+2+1의 결과값을 더하면 되는데요. 4+3+2+1은 뭔가 익숙한 형태입니다.

힌트 7
4+3+2+1은 triangle_number(4)입니다. 바로 우리가 찾던 같은 형태의 더 작은 "부분 문제"인 것이죠.

n이 5면 5와 triangle_number(4)을 더하면 되는데, 이것을 일반화하면 n과 triangle_number(n - 1)을 더하는 것입니다.

이제 이걸 코드로 옮겨보세요.

해답
def triangle_number(n):
    # base case
    if n == 1:
        return 1

    # recursive case
    return n + triangle_number(n - 1)

for i in range(1, 11):
    print(triangle_number(i))
코드를 실행시켜보면 자연수 1부터 10까지의 합이 잘 출력됩니다.

재귀함수를 이용해서 자연수 1부터 n까지의 합을 구해봤는데요. 그럼 이 알고리즘의 시간 복잡도는 어떻게 될까요?

시간 복잡도
일단 재귀적인 호출을 제외하고 시간 복잡도를 생각해 봅시다. Base case의 시간 복잡도는 인풋 크기와 연관이 없으니까 O(1)입니다. Recursive case에서는 triangle_number(n - 1)의 재귀적 호출을 제외하면 O(1)입니다.

그런데 재귀문을 통해서 triangle_number 함수는 총 n번 호출되니까, 총 O(n)의 시간이 걸리게 되죠.